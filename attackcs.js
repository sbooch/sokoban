// Generated by CoffeeScript 1.6.3
var DOWN, FLOOR, LEFT, PLAYER, PLAYING, RIGHT, SPACE_BAR, START, UP, WALL, WON, board, bombIndex, calculateMove, canvas, clone, compare, ctx, drawBackground, drawBomb, drawBombs, drawDefusor, drawDefusors, drawFloor, drawGame, drawGameOver, drawPlayer, drawWall, easy_level1, gameState, getNewPos, isBomb, isFree, isMovableBomb, isUnMovableBomb, isWall, level1, loadImages, moveBomb, movePlayer, testBoard, tileSheet, winner, _bombs, _bombs_el1, _bombs_l1, _bombs_winning_l1, _defusors_l1, _easyMap, _level1, _player, _player_l1, _player_winning_l1;

_level1 = ["    #####          ", "    #   #          ", "    #   #          ", "  ###   ##         ", "  #      #         ", "### # ## #   ######", "#   # ## #####    #", "#                 #", "##### ### # ##    #", "    #     #########", "    #######        "];

_player_l1 = {
  x: 8,
  y: 6
};

_player_winning_l1 = {
  x: 14,
  y: 6
};

_bombs_l1 = [[5, 2], [5, 4], [7, 3], [7, 4], [2, 7], [5, 7]];

_bombs_el1 = [[16, 6], [16, 7], [16, 8], [17, 6], [2, 7], [5, 7]];

_bombs_winning_l1 = [[15, 6], [16, 7], [16, 8], [17, 6], [17, 7], [17, 8]];

_defusors_l1 = [[16, 6], [16, 7], [16, 8], [17, 6], [17, 7], [17, 8]];

tileSheet = null;

gameState = START;

START = 1;

PLAYING = 2;

WON = 3;

UP = 38;

DOWN = 40;

LEFT = 37;

RIGHT = 39;

SPACE_BAR = 32;

FLOOR = ' ';

WALL = '#';

PLAYER = 5;

_player = {
  x: 2,
  y: 1
};

_bombs = [[2, 1]];

_easyMap = [[3, 3, 3, 3, 3, 3], [3, 1, 1, 1, 1, 3], [3, 1, 1, 1, 1, 3], [3, 1, 1, 1, 1, 3], [3, 3, 3, 3, 3, 3]];

testBoard = {
  background: _easyMap,
  bombs: _bombs,
  player: _player
};

level1 = {
  background: _level1,
  defusors: _defusors_l1,
  bombs: _bombs_l1,
  player: _player_l1
};

winner = {
  background: _level1,
  defusors: _defusors_l1,
  bombs: _bombs_winning_l1,
  player: _player_winning_l1
};

easy_level1 = {
  background: _level1,
  defusors: _defusors_l1,
  bombs: _bombs_el1,
  player: _player_l1
};

board = level1;

board = easy_level1;

canvas = document.querySelector("canvas");

ctx = canvas.getContext("2d");

loadImages = function() {
  tileSheet = new Image();
  tileSheet.src = "ressources/timeBombPanic.png";
  return tileSheet.onload = function(event) {
    gameState = PLAYING;
    canvas.backgroundColor = "blue";
    return drawGame(board);
  };
};

loadImages();

window.onkeydown = function(e) {
  var newBoard;
  newBoard = calculateMove(board, e.keyCode);
  drawGame(newBoard);
  if (compare(newBoard.bombs, newBoard.defusors)) {
    return drawGameOver();
  } else {
    return board = newBoard;
  }
};

clone = function(obj) {
  var key, temp;
  if (obj === null || typeof obj !== "object") {
    return obj;
  }
  temp = new obj.constructor();
  for (key in obj) {
    temp[key] = clone(obj[key]);
  }
  return temp;
};

compare = function(arr1, arr2) {
  arr1.sort();
  arr2.sort();
  return ("" + arr1) === ("" + arr2);
};

getNewPos = function(map, key) {
  var newPos, nextToNewPos;
  newPos = clone(map.player);
  nextToNewPos = clone(map.player);
  if (key === LEFT) {
    newPos.x -= 1;
    nextToNewPos.x -= 2;
  } else if (key === RIGHT) {
    newPos.x += 1;
    nextToNewPos.x += 2;
  } else if (key === DOWN) {
    newPos.y += 1;
    nextToNewPos.y += 2;
  } else if (key === UP) {
    newPos.y -= 1;
    nextToNewPos.y -= 2;
  } else {

  }
  return [newPos, nextToNewPos];
};

calculateMove = function(board, key) {
  var newBombs, newPlayer, newPos, nextToNewPos, _ref;
  _ref = getNewPos(board, key), newPos = _ref[0], nextToNewPos = _ref[1];
  if (isWall(board.background, newPos)) {

  } else if (isBomb(board.bombs, newPos)) {
    if (isMovableBomb(board, newPos, nextToNewPos)) {
      newBombs = moveBomb(board.bombs, newPos, nextToNewPos);
      newPlayer = movePlayer(board.player, newPos);
      board.player = clone(newPlayer);
      board.bombs = clone(newBombs);
      console.log("isMovableBomb");
    } else if (isUnMovableBomb(board, newPos, nextToNewPos)) {

    } else {

    }
  } else {
    newPlayer = movePlayer(board, newPos);
    board.player = clone(newPlayer);
    console.log("else");
  }
  return board;
};

movePlayer = function(player, pos) {
  player.x = pos.x;
  player.y = pos.y;
  return player;
};

moveBomb = function(bombs, oldPos, newPos) {
  var _bombIndex;
  _bombIndex = bombIndex(bombs, oldPos);
  bombs[_bombIndex][0] = newPos.x;
  bombs[_bombIndex][1] = newPos.y;
  return bombs;
};

isMovableBomb = function(board, newPos, nextToNewPos) {
  var _newPosIsBomb, _nextPosIsFree;
  _newPosIsBomb = isBomb(board.bombs, newPos);
  _nextPosIsFree = isFree(board, nextToNewPos);
  return _newPosIsBomb && _nextPosIsFree;
};

isUnMovableBomb = function(board, newPos, nextToNewPos) {
  var _newPosIsBomb, _nextPosIsBomb, _nextPosIsWall;
  _newPosIsBomb = isBomb(board.bombs, newPos);
  _nextPosIsBomb = isBomb(board.bombs, nextToNewPos);
  _nextPosIsWall = isWall(board.background, nextToNewPos);
  return _newPosIsBomb && (_nextPosIsBomb || _nextPosIsWall);
};

isFree = function(board, pos) {
  var _isNoBomb, _isNoWall;
  _isNoWall = !(isWall(board.background, pos));
  _isNoBomb = !(isBomb(board.bombs, pos));
  return _isNoWall && _isNoBomb;
};

isBomb = function(bombs, pos) {
  var _bombIndex;
  _bombIndex = bombIndex(bombs, pos);
  console.log(_bombIndex);
  return _bombIndex > -1;
};

isWall = function(background, pos) {
  return background[pos.y][pos.x] === WALL;
};

bombIndex = function(bombs, pos) {
  var bomb, i, _i, _len;
  for (i = _i = 0, _len = bombs.length; _i < _len; i = ++_i) {
    bomb = bombs[i];
    if (bomb[0] === pos.x && bomb[1] === pos.y) {
      return i;
    }
  }
  return -1;
};

drawGame = function(board) {
  drawBackground(board.background);
  drawDefusors(board.defusors);
  drawBombs(board.bombs);
  return drawPlayer(board.player);
};

drawBackground = function(background) {
  var element, i, j, line, _i, _len, _results;
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  _results = [];
  for (i = _i = 0, _len = background.length; _i < _len; i = ++_i) {
    line = background[i];
    _results.push((function() {
      var _j, _len1, _results1;
      _results1 = [];
      for (j = _j = 0, _len1 = line.length; _j < _len1; j = ++_j) {
        element = line[j];
        if (element === WALL) {
          _results1.push(drawWall(j * 64, i * 64));
        } else if (element === FLOOR) {
          _results1.push(drawFloor(j * 64, i * 64));
        } else {
          _results1.push(void 0);
        }
      }
      return _results1;
    })());
  }
  return _results;
};

drawBombs = function(bombs) {
  var bomb, _i, _len, _results;
  _results = [];
  for (_i = 0, _len = bombs.length; _i < _len; _i++) {
    bomb = bombs[_i];
    _results.push(drawBomb(bomb[0] * 64, bomb[1] * 64));
  }
  return _results;
};

drawDefusors = function(defusors) {
  var defusor, _i, _len, _results;
  _results = [];
  for (_i = 0, _len = defusors.length; _i < _len; _i++) {
    defusor = defusors[_i];
    _results.push(drawDefusor(defusor[0] * 64, defusor[1] * 64));
  }
  return _results;
};

drawPlayer = function(player) {
  var x, y;
  x = player.x * 64;
  y = player.y * 64;
  return ctx.drawImage(tileSheet, 192, 0, 64, 64, x, y, 64, 64);
};

drawFloor = function(x, y) {
  return ctx.drawImage(tileSheet, 0, 0, 64, 64, x, y, 64, 64);
};

drawWall = function(x, y) {
  return ctx.drawImage(tileSheet, 128, 0, 64, 64, x, y, 64, 64);
};

drawBomb = function(x, y) {
  return ctx.drawImage(tileSheet, 256, 0, 64, 64, x + 15, y + 15, 64, 64);
};

drawDefusor = function(x, y) {
  return ctx.drawImage(tileSheet, 64, 0, 64, 64, x, y, 64, 64);
};

drawGameOver = function() {
  var posx, posy;
  posx = 1280 / 2 - 316 / 2;
  posy = 768 / 2 - 290 / 2;
  ctx.drawImage(tileSheet, 0, 129, 316, 290, posx, posy, 316, 290);
  ctx.fillStyle = "black";
  ctx.font = "bold 30px Helvetica";
  return ctx.fillText("You won!", 555, 425);
};
